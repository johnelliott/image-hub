---
- hosts: hubs
  vars:
    user: pi
    cron_email: johnelliott703@gmail.com
    nvm_version: v0.33.6
    node_version: v8.9.2
    image_hub_app_version: master
    image_hub_app_path: /home/{{ user }}/image-hub
    github_key: /home/{{ user }}/.ssh/github_rsa
  tasks:
  - name: install apt packages
    become: true
    apt: pkg={{ item }} update_cache=yes cache_valid_time=3600 state=present
    with_items:
      - build-essential
      - libssl-dev
      - git
      - vim
      - tmux
      - nginx
      - ssmtp
      - mpack
      - rsync
      - exfat-fuse
      - exfat-utils
      - ntfs-3g
      - imagemagick
      - graphicsmagick
      - exiftool
  - name: download .vimrc
    get_url:
      url: https://raw.githubusercontent.com/johnelliott/dotfiles/master/.vimrc.min
      dest: ~/.vimrc
  - name: add deploy private key
    copy: src=~/.ssh/raspi-deploy dest=~/.ssh/ mode=600
  - name: add deploy public key
    copy: src=~/.ssh/raspi-deploy.pub dest=~/.ssh/ mode=600
  - name: add ssh config
    copy: src=./ssh-config.txt dest=~/.ssh/config
  - name: wifi
    become: yes
    copy: src=wpa_supplicant.conf dest=/etc/wpa_supplicant/wpa_supplicant.conf
    # TODO restart wpa supplicant and services e.g. wpa_cli -i wlan0 reconfigure

  # what is mode here??
  - name: create media dir
    file: path=/media state=directory owner=root
    become: true
  - name: create photo card mount point
    file: path=/media/card state=directory owner=root
    become: true

  - name: create photo storage directories
    file: path=/media/{{ item }} state=directory owner={{ user }} mode=775
    become: true
    with_items:
      - storage
      - stories
      - small

  - name: Install nvm
    git: repo=https://github.com/creationix/nvm.git dest=/home/{{ user }}/.nvm version={{ nvm_version }}
  - name: configure ~/.profile to source nvm
    lineinfile:
      dest: /home/{{ user }}/.profile
      line: '[ -s $HOME/.nvm/nvm.sh ] && . $HOME/.nvm/nvm.sh  # This loads NVM'
      create: yes
  - name: configure ~/.profile to have nvm_dir
    lineinfile:
      dest: /home/{{ user }}/.profile
      insertbefore: 'NVM$'
      line: 'export NVM_DIR="$HOME/.nvm"'
      create: yes
  - name: install node
    shell: . "$HOME/.nvm/nvm.sh" && nvm install "{{ node_version }}"
    args:
      executable: /bin/bash
    # capture installed node version as ansible variable:
    # https://github.com/leonidas/ansible-nvm/blob/master/tasks/main.yml
    register: nvm_install_result
    #capture installed node version as ansible variable:
    # https://github.com/leonidas/ansible-nvm/blob/master/tasks/main.yml
    changed_when: "'is already installed.' not in nvm_install_result.stderr"
  - name: check if {{ node_version }} is the current node version
    shell: . /home/{{ user }}/.nvm/nvm.sh && nvm current
    args:
      executable: /bin/bash
    # capture node version as ansible variable:
    # https://github.com/leonidas/ansible-nvm/blob/master/tasks/main.yml
    register: nvm_check_default
    changed_when: node_version == nvm_check_default.stdout
    # changed_when: False
    ignore_errors: True
  - name: Set default node version to {{ node_version }} for future interactive use
    shell: nvm alias default {{ node_version }}
    when: nvm_check_default|failed

  - name: clone app
    git:
      repo: ssh://git@github.com/johnelliott/image-hub.git
      dest: ~/image-hub
      version: "{{ image_hub_app_version }}"
      accept_hostkey: yes
      key_file: "{{ github_key }}"
      force: true

  - name: copy image-hub environment configuration
    copy: src=./image-hub.env dest={{ image_hub_app_path }}/.env

  - name: build app
    shell: . $HOME/.nvm/nvm.sh && npm install && npm run build
    args:
      chdir: "{{ image_hub_app_path }}"
      executable: /bin/bash

  # TODO symlink nginx config symlink
  - name: nginx prepare
    become: yes
    file:
      dest: /etc/nginx/sites-enabled/default
      state: absent
  - name: nginx install
    become: yes
    file:
      dest: /etc/nginx/sites-enabled/image-hub.nginx.conf
      src: /home/{{ user }}/image-hub/image-hub.nginx.conf
      state: link
      owner: root
  - name: nginx reload
    become: yes
    shell: /usr/sbin/nginx -s reload
    args:
      executable: /bin/bash


  - name: install etl
    become: yes
    file:
      dest: /etc/systemd/system/image-hub-etl.service
      src: /home/{{ user }}/image-hub/image-hub-etl.service
      state: link
      owner: root
  - name: enable etl
    become: yes
    systemd:
      name: image-hub-etl
      enabled: yes
      state: started
    notify: restart image-hub-etl
  - name: install www
    become: yes
    file:
      dest: /etc/systemd/system/image-hub-www.service
      src: /home/{{ user }}/image-hub/image-hub-www.service
      state: link
      owner: root
  - name: enable www
    become: yes
    systemd:
      name: image-hub-www
      enabled: yes
      state: started
    notify: restart image-hub-www

  - name: cron email
    cronvar:
      name: EMAIL
      value: "{{ cron_email }}"
  - name: cron job
    cron:
      name: "Card loop on reboot"
      special_time: reboot
      job: "sudo {{ image_hub_app_path }}/rsync-loop.sh > /home/{{ user }}//rsync-loop.log"

  handlers:
  - name: restart etl
    become: yes
    systemd:
      name: image-hub-etl
      enabled: yes
      state: restarted
  - name: restart www
    become: yes
    systemd:
      name: image-hub-www
      enabled: yes
      state: restarted
  # Is this a bad idea? Will I lose ssh connection for ansible?
  - name: restart networking
    become: yes
    service:
      name: networking
      state: restarted
